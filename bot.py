import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from typing import Dict, List
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ {user_id: [—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á]}
active_alarms: Dict[int, List[asyncio.Task]] = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —Å–ø–∞–º–∞ {user_id: True/False}
spam_active: Dict[int, bool] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('alarms.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS alarms (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            alarm_time TEXT NOT NULL,
            message TEXT,
            created_at TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
async def load_saved_alarms(app: Application):
    conn = sqlite3.connect('alarms.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, alarm_time, message FROM alarms')
    alarms = cursor.fetchall()
    conn.close()
    
    for user_id, alarm_time, message in alarms:
        try:
            alarm_datetime = datetime.strptime(alarm_time, "%H:%M")
            await schedule_alarm(app, user_id, alarm_datetime, message or "")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
async def schedule_alarm(app: Application, user_id: int, alarm_time: datetime, message: str = ""):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    now = datetime.now()
    target = alarm_time.replace(year=now.year, month=now.month, day=now.day)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if target < now:
        target = target.replace(day=target.day + 1)
    
    delay = (target - now).total_seconds()
    logger.info(f"–ë—É–¥–∏–ª—å–Ω–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {alarm_time.strftime('%H:%M')}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = asyncio.create_task(
        send_alarm(app, user_id, alarm_time, message, delay)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    if user_id not in active_alarms:
        active_alarms[user_id] = []
    active_alarms[user_id].append(task)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
async def spam_messages(app: Application, user_id: int, alarm_time: datetime, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω"""
    spam_active[user_id] = True
    
    while spam_active.get(user_id, False):
        try:
            current_time = datetime.now().strftime("%H:%M:%S")
            alarm_text = f"‚è∞ –ë–£–î–ò–õ–¨–ù–ò–ö! –í—Ä–µ–º—è: {alarm_time.strftime('%H:%M')}\nüïê –°–µ–π—á–∞—Å: {current_time}"
            if message:
                alarm_text += f"\nüí¨ {message}"
            alarm_text += "\n\n‚ùå –ù–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            
            await app.bot.send_message(chat_id=user_id, text=alarm_text)
            logger.info(f"–ë—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await asyncio.sleep(5)
            
        except asyncio.CancelledError:
            logger.info(f"–°–ø–∞–º –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: {e}")
            break

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
async def send_alarm(app: Application, user_id: int, alarm_time: datetime, message: str, delay: float):
    """–ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–∞–º"""
    try:
        # –ñ–¥–µ–º –¥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
        await asyncio.sleep(delay)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        spam_active[user_id] = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º
        task = asyncio.create_task(
            spam_messages(app, user_id, alarm_time, message)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        if user_id not in active_alarms:
            active_alarms[user_id] = []
        active_alarms[user_id].append(task)
        
    except asyncio.CancelledError:
        logger.info(f"–ë—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        spam_active[user_id] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–±—É–¥–∏–ª—å–Ω–∏–∫.\n\n"
        "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /set HH:MM [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ –≤—Ä–µ–º—è\n"
        "‚Ä¢ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏\n"
        "‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä: /set 08:30 –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set
async def set_alarm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set HH:MM [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            "–ü—Ä–∏–º–µ—Ä: /set 08:30 –ü—Ä–æ—Å–Ω–∏—Å—å!"
        )
        return
    
    user_id = update.effective_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = context.args[0]
        alarm_time = datetime.strptime(time_str, "%H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        message = " ".join(context.args[1:]) if len(context.args) > 1 else ""
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in active_alarms:
            for task in active_alarms[user_id]:
                task.cancel()
            active_alarms[user_id] = []
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–ª–∞–≥ —Å–ø–∞–º–∞ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        spam_active[user_id] = False
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫
        await schedule_alarm(context.application, user_id, alarm_time, message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = sqlite3.connect('alarms.db')
        cursor = conn.cursor()
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('DELETE FROM alarms WHERE user_id = ?', (user_id,))
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        cursor.execute(
            'INSERT INTO alarms (user_id, alarm_time, message, created_at) VALUES (?, ?, ?, ?)',
            (user_id, alarm_time.strftime("%H:%M"), message, datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
        now = datetime.now()
        target = alarm_time.replace(year=now.year, month=now.month, day=now.day)
        
        if target < now:
            target = target.replace(day=target.day + 1)
        
        time_until = target - now
        hours = int(time_until.total_seconds() // 3600)
        minutes = int((time_until.total_seconds() % 3600) // 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
        time_text = ""
        if hours > 0:
            time_text += f"{hours} —á–∞—Å(–æ–≤) "
        if minutes > 0:
            time_text += f"{minutes} –º–∏–Ω—É—Ç(—ã) "
        
        await update.message.reply_text(
            f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {alarm_time.strftime('%H:%M')}\n"
            f"‚è≥ –î–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: {time_text.strip() or '–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã'}\n"
            f"üì¢ –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–ø–∏—à–µ—Ç–µ '—Å—Ç–æ–ø'\n"
            f"‚ùå –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop"
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set HH:MM [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            "–ü—Ä–∏–º–µ—Ä: /set 08:30"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop_alarm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏"""
    user_id = update.effective_user.id
    
    if user_id not in active_alarms or not active_alarms[user_id]:
        await update.message.reply_text("‚è∏ –í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞.")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–º
    spam_active[user_id] = False
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for task in active_alarms[user_id]:
        task.cancel()
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    conn = sqlite3.connect('alarms.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alarms WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    
    active_alarms[user_id] = []
    
    await update.message.reply_text("üõë –í—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    conn = sqlite3.connect('alarms.db')
    cursor = conn.cursor()
    cursor.execute('SELECT alarm_time, message FROM alarms WHERE user_id = ?', (user_id,))
    alarms = cursor.fetchall()
    conn.close()
    
    if not alarms:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤.")
        return
    
    status_text = "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:\n\n"
    for alarm_time, message in alarms:
        status_text += f"‚è∞ {alarm_time}"
        if message:
            status_text += f" ‚Äî {message}"
        status_text += "\n"
    
    await update.message.reply_text(status_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–æ–ø")
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = update.message.text.lower().strip()
    
    if text in ["—Å—Ç–æ–ø", "stop", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "stop all"]:
        await stop_alarm(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_alarm))
    application.add_handler(CommandHandler("stop", stop_alarm))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

